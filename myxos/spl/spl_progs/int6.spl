// int=6 holds syscall 9, 11 nd 13

alias physicalSP S0;						// Physical Address = Physical Page Number x 512 + offset.
physicalSP = ([PTBR + 2*(SP / 512)]*512) + (SP % 512);

alias sysCallNo S1;							// first argument is syscall number
sysCallNo = [physicalSP - 1];

alias fileName S2;
fileName = [physicalSP - 3];	// note the three, not two

alias PID S8;
PID = (PTBR - 1024) / 8;

alias currentPCB S9;
currentPCB = READY_LIST + 32*PID;

alias counter S3;

if (sysCallNo == 9) then					// SysCallNo = 9 => Exec
	
	alias FATIndex S4;						// check if file exists
	FATIndex = 0;
	
	while (FATIndex < 64) do				
		if ([FAT + FATIndex*8] == fileName) then
			break;			
		endif;		
		FATIndex = FATIndex + 1;	
	endwhile;
	
	if (FATIndex == 64) then	
		[physicalSP - 2] = -1;				// file does not exist
		ireturn;	
	endif;	
	
	alias countCodeBlocksNew S5;					// count the number of code blocks of the new program
	countCodeBlocksNew = [FAT + FATIndex*8 + 1];	// size
	countCodeBlocksNew = countCodeBlocksNew / 512;	// size by 512 gives number of pages
	
	if (countCodeBlocksNew > 3) then
		[physicalSP - 2] = -1;				// invalid file, program can have only three pages of code
		ireturn;
	endif;
	
	counter = 0;
	while (counter < 3) do
		if ([PTBR + counter*2 + 1] == "01" || [PTBR + counter*2 + 1] == "11") then		// decrement count in mem list
			[MEM_LIST + [PTBR + counter*2]] = [MEM_LIST + [PTBR + counter*2]] - 1;
		endif;
		if ([PTBR + counter*2 + 1] == "00" && [PTBR + counter*2] > 447) then
			[DISK_LIST + [PTBR + counter*2]] = [DISK_LIST + [PTBR + counter*2]] - 1;
		endif;
		counter = counter + 1;
	endwhile;
	
	load(1, [FAT + FATIndex*8 + 2]);						// load basic block 
	
	counter = 0;
	while (counter < countCodeBlocksNew) do 				// update the PTBR
		[PTBR + counter*2] = [SCRATCHPAD + counter];
		[PTBR + counter*2 + 1] = "00";
		counter = counter + 1;
	endwhile;
	
	while (counter < 3) do 								// invalidate remaining entries in PTBR
		[PTBR + counter*2] = -1;
		[PTBR + counter*2 + 1] = "00";
		counter = counter + 1;
	endwhile;
	
	[PTBR + 7] = "01";	
		
	counter = 0;
	while (counter < 8) do 								// close all open files
		if ([currentPCB + 15 + counter*2] != -1) then				
			[FILE_TABLE + [currentPCB + 15 + counter*2]*2 + 1] = [FILE_TABLE + [currentPCB + 15 + counter*2]*2 + 1] - 1;
			if ([FILE_TABLE + [currentPCB + 15 + counter*2]*2 + 1] == 0) then				
				[FILE_TABLE + [currentPCB + 15 + counter*2]*2] = -1;
			endif;
			[currentPCB + 15 + counter*2] = -1;
			[currentPCB + 15 + counter*2 + 1] = -1;	
		endif;
		counter = counter + 1;
	endwhile;

	SP = 3*512;							// reset sp
		
	physicalSP = ([PTBR + 2*(SP / 512)]*512) + (SP % 512);			// store IP on top
	[physicalSP] = 0;
	
	ireturn;

endif;


if (sysCallNo == 11) then									// sysCallNo = 11 => get current PID
	[physicalSP-2] = (PTBR - 1024)/8;
	ireturn;
endif;

if (sysCallNo == 12) then									// sysCallNo = 12 => get parent PID
	[physicalSP-2] = [currPCB+31];
	ireturn;
endif;
