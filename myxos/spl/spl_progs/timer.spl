// Timer Interrupt code

alias currPID S0;
currPID = (PTBR - 1024) / 8; 		// PID = (PTBR - 1024) / 8

alias currPCB S1;
currPCB = READY_LIST + 32 * currPID;	// PCB = 1536 + 32 * currPID

alias newPID S3;
newPID = (currPID + 1)%32;

[ currPCB + 1 ] = 1; 			// Set STATE of currentProcess to READY

[ currPCB + 2 ] = BP;			// When interrupt occured, ip was pushed in the stack and SP was 
[ currPCB + 3 ] = SP - 1; 			// incremented by 1 so SP-1 is the correct value and not SP.

alias physicalSP S2;				// Physical Address = Physical Page Number x 512 + offset
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
				
[ currPCB + 4 ] = [ physicalSP ]; 		// Save IP of current process in the PCB from the stack
[ currPCB + 5 ] = PTBR;			// Set PTBR and
[ currPCB + 6 ] = PTLR; 			// PTLR
[ currPCB + 7 ] = R0;
[ currPCB + 8 ] = R1;
[ currPCB + 9 ] = R2;
[ currPCB + 10 ] = R3;
[ currPCB + 11 ] = R4;
[ currPCB + 12 ] = R5;
[ currPCB + 13 ] = R6;
[ currPCB + 14 ] = R7;

while (newPID % 32 != currPID) do 
	if ([READY_LIST + 32*(newPID%32)+1] == 1) then 
		
	endif;
endwhile;

alias newPCB S3;
newPCB = READY_LIST + currPID*32;		//  Next Process to be scheduled

BP = [newPCB + 2];
SP = [newPCB + 3];
// IP = [newPCB + 4];				// We need to load it later
PTBR = [ newPCB + 5 ];
PTLR = [ newPCB + 6 ];
R0 = [ newPCB + 7 ];
R1 = [ newPCB + 8 ];
R2 = [ newPCB + 9 ];
R3 = [ newPCB + 10 ];
R4 = [ newPCB + 11 ];
R5 = [ newPCB + 12 ];
R6 = [ newPCB + 13 ];
R7 = [ newPCB + 14 ];
	
SP = SP + 1;					// Space for IP is allocated

alias newphysicalSP S2;				// Physical Address = Physical Page Number x 512 + offset 
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ newphysicalSP ] = [ newPCB + 4 ];		// Stores IP field value of PCB on the stack 

[newPCB + 1] = 2;				// set newProcess to running

ireturn;

