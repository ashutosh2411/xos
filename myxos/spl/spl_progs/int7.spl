// int=7 holds SysCall 10
alias physicalSP S0;					// Physical SP
physicalSP = ([PTBR + 2*(SP / 512)]*512) + (SP % 512);

alias sysCallNo S1;						// SysCallNumber
sysCallNo = [physicalSP - 1];

alias counter S4;
alias nextPID S2;

alias PID S8;
PID = (PTBR - 1024) / 8;

alias currentPCB S3;
currentPCB = READY_LIST + PID*32;

// sysCallNo = 13 => Wait
// sysCallNo = 14 => Signal

if (sysCallNo == 10) then								// sysCallNo = 10 => Exit

	counter = 0;
	while (counter < 32) do 							// unblock waiting processes
		if ([READY_LIST + 32*counter + 1] == 100 + PID) then
			[READY_LIST + 32*counter + 1] = 1;		// set process state to ready
		endif;
		counter = counter + 1;	
	endwhile;

	nextPID = 0;
	while (nextPID < 32) do 							// Search for next ready process
		if ([READY_LIST + 32*nextPID + 1] == 1) then
			break;
		endif;
		nextPID = nextPID + 1;
	endwhile;	
	
	if (nextPID == 32) then								// No ready processes
		halt;											// halt
	endif;
			
	counter = 0;
	while (counter < 8) do
		if ([currentPCB + 15 + counter*2] != -1) then			// handle open files. remove counts in SOFT and free the position if no open instance. 
			[FILE_TABLE + [currentPCB + 15 + counter*2]*2 + 1] = [FILE_TABLE + [currentPCB + 15 + counter*2]*2 + 1] - 1;
			if ([FILE_TABLE + [currentPCB + 15 + counter*2]*2 + 1] == 0) then
				[FILE_TABLE + [currentPCB + 15 + counter*2]*2] = -1;
			endif;
			[currentPCB + 15 + counter*2] = -1;					// invalidate POFT
			[currentPCB + 15 + counter*2 + 1] = -1;
		endif;
		counter = counter + 1;
	endwhile;
	
	[currentPCB + 1] = 0;										// set state as terminated

	counter = 0;												// free alloted pages.	
	while (counter < 4) do
		if ([PTBR + counter*2] == -1) then						// skip invalid entries in Page table
			counter = counter + 1;
			continue;
		endif;

		[MEM_LIST + [PTBR + counter*2]] = 0;					// otherwise set memory indices to free
		[PTBR + counter*2] = -1;								// and invalidate PT entries
		[PTBR + counter*2 + 1] = "00";							// and auxiliary information
		counter = counter + 1;
	endwhile;	
endif;

if (sysCallNo == 13) then
	nextPID = 0;
	while (nextPID < 32) do 									// Get next ready process
		if ([READY_LIST + 32*nextPID + 1] == 1) then
			break;
		endif;
		nextPID = nextPID + 1;
	endwhile;
	alias waitingPID S7;
	waitingPID = [physicalSP - 3];
	
	if ([READY_LIST + 32*waitingPID + 1] == 0 || [READY_LIST + 32*waitingPID + 1] == 2) then
		[physicalSP - 2] = -1;								// can't wait for an invalid process
		ireturn;											// or a running process, i.e itself.
	endif;
	
	[currentPCB+ 1] = 100 + waitingPID;			// set state to 100 + waitingPID
	[currentPCB + 2] = BP;						// BP
	[currentPCB + 3] = SP - 1;					// SP top has IP value. so, SP - 1
	[currentPCB + 4] = [physicalSP];			// IP
	[currentPCB + 5] = PTBR;					// PTBR
	[currentPCB + 6] = PTLR;					// PTLR
	[currentPCB + 7] = R0;						// Registers
	[currentPCB + 8] = R1;						//     "
	[currentPCB + 9] = R2;						//     "
	[currentPCB + 10] = R3;						//     "
	[currentPCB + 11] = R4;						//     "
	[currentPCB + 12] = R5;						//     "
	[currentPCB + 13] = R6;						//     "
	[currentPCB + 14] = R7;						//     "
	
endif;

if (sysCallNo == 10 || sysCallNo == 13) then

	BP = [nextPID + 2];
	SP = [nextPID + 3];	
// Will be loaded from top of SP.
	PTBR = [nextPID + 5];
	PTLR = [nextPID + 6];		
	R0 = [nextPID + 7];
	R1 = [nextPID + 8];
	R2 = [nextPID + 9];
	R3 = [nextPID + 10];
	R4 = [nextPID + 11];
	R5 = [nextPID + 12];
	R6 = [nextPID + 13];
	R7 = [nextPID + 14];
	
	SP = SP + 1;							// old SP + 1 will have IP value
	alias newPhysicalSP S6;
	newPhysicalSP = ([PTBR + 2*(SP / 512)]*512) + (SP % 512);		// calculate new Physical SP 
	[newPhysicalSP] = [nextPID + 4];		// load IP in that location
	
	[nextPID + 1] = 2;						// Set the state to running.
	
endif;

if (sysCallNo == 14) then			// sysCallNo = 14 => Signal
	counter = 0;
	while (counter < 32) do
		if ([READY_LIST + 32*counter + 1] == 100 + PID) then
			[READY_LIST + 32*counter + 1] = 1;		// set blocked process state to ready
		endif;
		counter = counter + 1;	
	endwhile;

	[physicalSP - 2] = 0;								// return.
	ireturn;	
endif;
ireturn;