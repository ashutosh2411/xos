// int=1 handles SysCall 1 and 4					

alias physicalSP S0;				// Physical Address = Physical Page Number x 512 + offset.
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;					// First argument from stack is system call number.
sysCallNo = [physicalSP - 1];

// returnvalue = [physicalSP - 2]	// [physicalSP - 2] is for return value to be saved in stack.

alias filename S2;					// The Next argument is file name.
filename = [physicalSP - 3];		// There is just one argument for this system call.

if (sysCallNo == 1) then			// sysCallNo = 1 => Create file.
	//print("Syscallno = 1");
	alias FATIndex S3;				// To index in FAT table.
	FATIndex = 0;
	
	while (FATIndex < 64) do		// See if file is already present.
		//print("Here");							// Each entry is 8 words.
		if ([FAT + FATIndex*8] == filename) then
			[physicalSP - 2] = 0;	// Return success.
			ireturn;
		endif;
		FATIndex = FATIndex + 1;
	endwhile;
	
	alias DFLIndex S4;				// To index in Disk Free List.
	DFLIndex = 24;
	
	while (DFLIndex < 448) do		// 447-512 are to be used for swapping. 
									// Find a free slot in DFL. 
		//print("Here");							// Each entry is 1 word
		if ([DISK_LIST + DFLIndex] == 0) then	
			break;					// DISK_LIST = address where DFL starts.
		endif;				
		DFLIndex = DFLIndex + 1;	
	endwhile;
	
	if (DFLIndex == 448) then		// If no slot in the disk is free, return error.
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
		
	FATIndex = 0;
	while (FATIndex < 64) do		// Find a free slot in FAT.
		if ([FAT + FATIndex * 8 + 2] == -1) then
			// Initialization of the FAT entry		// FATIndex stores the index of free FAT slot.
			[FAT + FATIndex * 8] = filename;  		// Setting file entry.
			[FAT + FATIndex * 8 + 1] = 0;			// File size.
			[FAT + FATIndex * 8 + 2] = DFLIndex;	// Basic Block Number.
			break;		
		endif;		
		FATIndex = FATIndex + 1;	
	endwhile;

	if (FATIndex == 64) then 		// Return error if none found.
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	load (1, DFLIndex);							// Load the basic block to OS startup code page
												// as that page is no longer required.

	alias counter S5;
	counter = 0;						// Temporary Counter
	
	while (counter < 256) do			// Set all 256 entries corresponding to the data blocks
		[SCRATCHPAD + counter] = -1;	// used currently by the file.
		counter = counter + 1;				
	endwhile;
	
	store(1, DFLIndex);					// Load from scratchpad back to actual basic block
	[DISK_LIST + DFLIndex] = 1;			// location.

	store(5, 19);						// store the updated FAT to disk 			
	store(6, 20);						// store the updated DFL to disk
	
	[physicalSP - 2] = 0;				// return without an error
	ireturn;
	
endif;

if (sysCallNo == 4) then				// sysCallNo = 4 => Delete file.
	alias FATIndex S3;					// To index in FAT table.
	FATIndex = 0;
	
	while (FATIndex < 64) do						// See if file is present.
		if ([FAT + FATIndex*8] == filename) then	// Each entry is 8 words.
			break;
		endif;
		
		FATIndex = FATIndex + 1;
	endwhile;
	
	if (FATIndex == 64)	then					// If file not found 
		[physicalSP - 2] = -1;				// return errorcode
		ireturn;
	endif;	

	alias SOFTIndex S4;
	SOFTIndex = 0;

	while (SOFTIndex < 64) do 				// Check if file present in SOFT
		if ([FILE_TABLE + SOFTIndex*2] == FATIndex) then
			break;							// If file found break
		endif;

		SOFTIndex = SOFTIndex+1;
	endwhile;

	if (SOFTIndex < 64 && [FILE_TABLE + SOFTIndex*2 + 1] > 0) then
		[physicalSP-2] = -1;				// If no of instances is > 0
		ireturn;							// return errorcode
	endif;

	load (1, [FAT + FATIndex * 8 + 2]);				// Basic Block
	[FAT + FATIndex*8 + 1] = -1;
	
	alias nBlocks S5; 
	nBlocks = 0;	
	alias counter S6;
	alias currBlock S7;

	while (nBlocks < 256) do 
		if ([SCRATCHPAD+nBlocks] < 0) then
			break;
		endif;

		currBlock = [SCRATCHPAD+nBlocks];
		[DISK_LIST + currBlock] = 0;
		load (1, currBlock);
		counter = 0;

		while (counter < 512) do 
			[SCRATCHPAD+counter] = "";
			counter = counter + 1;
		endwhile;
		
		store (1, currBlock);
		load (1, [FAT + FATIndex * 8 + 2]);
		nBlocks = nBlocks+1;
	endwhile;

	[FAT + FATIndex * 8] = -1;			// Invalidate the entry in
	[FAT + FATIndex * 8 + 1] = 0;		// FAT
	[FAT + FATIndex * 8 + 2] = -1;

	store(5, 19);						// store the updated FAT to disk 			
	store(6, 20);						// store the updated DFL to disk
	
	[physicalSP-2] = 0;
	ireturn;
endif;