// int=4 holds SysCalls 5

alias physicalSP S0;					// Physical Address = Physical Page Number x 512 + offset.
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;								// First argument from stack is system call number.
sysCallNo = [physicalSP - 1];

// returnvalue = [physicalSP - 2]				// [physicalSP - 2] is for return value to be saved in stack.

alias currPCB S8;								// Formula for curr PCB
currPCB = READY_LIST + 32 * ((PTBR - 1024) / 8);


if (sysCallNo == 5) then

	alias fileDescriptor S2;				
	fileDescriptor = [physicalSP - 4];	

	alias wordToWrite S3;				
	wordToWrite = [physicalSP - 3];		


	if (fileDescriptor > 7 || fileDescriptor < 0 || [currPCB+15+fileDescriptor*2] == -1) then
		[physicalSP-2] = -1;					// Invalid request by user
		ireturn;								// return errorcode
	endif;

	alias SOFTIndex S4;
	SOFTIndex = [currPCB+15+fileDescriptor*2];				// set SOFTIndex
	alias lSeek S5;	
	lSeek = [currPCB+15+fileDescriptor*2+1];					// set lSeek
	
	alias FATIndex S9;
	FATIndex = [FILE_TABLE + SOFTIndex*2];
	
	load (1, [FAT + FATIndex*8 + 2]);		// FATIndex = [FILE_TABLE + SOFTIndex*2]
	
	alias DFLIndex S7;
	DFLIndex = [SCRATCHPAD + lSeek / 512];
	breakpoint;
	if(DFLIndex == -1) then
		DFLIndex = 24;
		while (DFLIndex < 448) do		
			if ([FAT + 512 + DFLIndex] == 0) then		
				break;							// search DFL for a free block
			endif;				
			DFLIndex = DFLIndex + 1;			
		endwhile;
		if (DFLIndex == 448) then		
			[physicalSP - 2] = -1;				// No free block
			ireturn;							// return errorcode
		endif;

		[FAT + 512 + DFLIndex] = 1;				// Set DFL entry for the free to non free
		[SCRATCHPAD + lSeek / 512] = DFLIndex;		// Set Basic Block Entry as FATIndex

		store (1, [FAT + [FILE_TABLE + SOFTIndex*2]*8 + 2]);			// Store Basic Block back.
		[FAT + [FILE_TABLE + SOFTIndex*2]*8 + 1] = [FAT + [FILE_TABLE + SOFTIndex*2]*8 + 1] + 512;
												// Increment size parameter FAT
		store(5, 19);							// store the updated FAT to disk 			
		store(6, 20);							// store the updated DFL to disk
	endif;
	breakpoint;
	load (1, DFLIndex);			// Load block which contains LSEEK
	breakpoint;
	[SCRATCHPAD + lSeek % 512] = wordToWrite;	// Write word
	//print([SCRATCHPAD + lSeek % 512]);
	store (1, DFLIndex);			// Store back
	breakpoint;
	[currPCB + 15 + fileDescriptor * 2 + 1] = [currPCB + 15 + fileDescriptor * 2 + 1] + 1;
	[physicalSP-2] = 0;							// Increment LSEEK
	breakpoint;
	ireturn;									// return success
endif;
