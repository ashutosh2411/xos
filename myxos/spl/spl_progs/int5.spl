// int=5 holds SysCall 8 

alias physicalSP S0;					// Physical Address = Physical Page Number x 512 + offset.
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;						// First argument from stack is system call number.
sysCallNo = [physicalSP - 1];

alias currPID S2;
currPID = (PTBR - 1024) / 8;

alias startPTE S15;
alias PTCounter S14;
alias swapPageIndex S13;
alias TRUE S12;
TRUE = 1;

if (sysCallNo == 8) then				// sysCallNo = 8 => Fork
	alias RLIndex S2;
	RLIndex = 0;

	while (RLIndex < 32) do 			// Search for a free slot in Ready List.
		if ([READY_LIST + 32*RLIndex + 1] == 0) then
			break;
		endif;
		RLIndex = RLIndex + 1;
	endwhile;		
	if (RLIndex == 32) then 			// If beyond 32
		[physicalSP-2] = -1;			// return error message.
	endif;
	
	alias childPTBR S3; 
	childPTBR = 1024 + ` * 8;		// Child process's PTBR

	alias counter S6;
	counter = 0;

	alias S7 newStackLocation;

	while (counter < 64) do 
		if ([MEM_LIST + counter] == 0) then 
			newStackLocation = counter;
			[MEM_LIST + counter] = 1;
		endif;
		counter = counter + 1;
	endwhile;

	if (counter == 64) then 							// 
		startPTE = childPTBR - 1018;					// 1018 = 1024 - 6
		while (1 == 1) do 
			PTECounter = (startPTE + 2) % 256;
			while (PTECounter != startPTE) do 
				if (PTECounter % 8 == 6) do 
					PTECounter = (PTECounter + 2) % 256;
					continue;
				endif;
				if ([PAGE_TABLE + PTECounter + 1] == "01") then
					if ([MEM_LIST + [PAGE_TABLE + PTECounter]] > 1) then
						PTECounter = PTECounter + 2;
						continue;
					endif;
					swapPageIndex = 448;
					while (swapPageIndex < 512) do 
						if ([DISK_LIST + swapPageIndex] == 0) then
							store ([PAGE_TABLE + PTECounter], swapPageIndex);
							[DISK_LIST + swapPageIndex] = 1;
							newStackLocation = [PAGE_TABLE + PTECounter];
							[PAGE_TABLE + PTECounter] = swapPageIndex;
							[PAGE_TABLE + PTECounter + 1] = "00";
							break;
						endif;
						swapPageIndex = swapPageIndex + 1;
					endwhile;
				endif;
				if ([PAGE_TABLE + PTECounter + 1] == "11") then
					[PAGE_TABLE + PTECounter + 1] = "01";
				endif;
			endwhile;
			if (PTECounter != startPTE) then
				break;
			endif;
		endwhile;
	endif;

	alias wordIndex S8;
	wordIndex = 0;
	while (wordIndex < 512) do 
		[newStackLocation * 512 + wordIndex] = [[PTBR + 6]*512 + wordIndex];
		wordIndex = wordIndex + 1;
	endwhile;

	[childPTBR + 6] = newStackLocation;
	[childPTBR + 7] = "01";

	counter = 0;
	while (counter < 3) do 
		[childPTBR + counter*2] = [PTBR + counter*2];
		[childPTBR + counter*2] = [PTBR + counter*2 + 1];
		if ([PTBR + counter*2 + 1] == "01" || [PTBR + counter * 2 + 1] == "11") then 
			[MEM_LIST + [PTBR + counter*2]] = [MEM_LIST + [PTBR + counter*2]] + 1;
		endif;
		if ([PTBR + counter*2 + 1] == "00" && [PTBR + counter * 2] > 447) then
			[DISK_LIST + [PTBR + counter*2]] = [DISK_LIST + [PTBR + counter*2]] + 1;
			store (6,20);
		endif;
		counter = counter + 1;
	endwhile; 
	
	alias childPCB S9
	childPCB = READY_LIST + 32*RLIndex;

	[childPCB + 0]  = RLIndex;		// PID 		
	// [childPCB + 1] = 1						// State	
	[childPCB + 2]  = BP;				// BP		
	[childPCB + 3]  = SP-1;						// SP
	[childPCB + 4]  = [physicalSP];				// IP
	[childPCB + 5]  = PAGE_TABLE + 8*RLIndex; 	// New Page Table Base
	[childPCB + 6]  = 4;				// Length
	[childPCB + 7]  = R0;				// General Registers
	[childPCB + 8]  = R1;				// 	  "			"
	[childPCB + 9]  = R2;				// 	  "			"
	[childPCB + 10] = R3;			// 	  "			"
	[childPCB + 11] = R4;			// 	  "			"
	[childPCB + 12] = R5;			// 	  "			"
	[childPCB + 13] = R6;			// 	  "			"
	[childPCB + 14] = R7;			// 	  "			"
	[childPCB + 31] = currPID;		// parent PID
	counter = 0;
	while (counter < 8) do 							// Copying Per process file table.
		[childPCB + 15 + 2*counter] = [READY_LIST + 32*currPID + 15 + 2*counter];
		[childPCB + 15 + 2*counter + 1] = [READY_LIST + 32*currPID + 15 + 2*counter + 1];
		if ([childPCB + 15 + counter*2] != -1) then
			[FILE_TABLE + [childPCB + 15 + 2*counter] + 1] = [FILE_TABLE + [childPCB + 15 + 2*counter] + 1] + 1;
		endif;
		counter = counter + 1;						// and increment open file counts by 1
	endwhile;

	[childPCB + 1] = 1;				// set State to ready
	[physicalSP-2] = RLIndex;						// For parent return child's PID

	alias childPhysicalSP S0;						// For child, 
	childPhysicalSP = [PAGE_TABLE + 8*RLIndex + 2*((SP-1) / 512)]*512 + (SP-1) % 512;		// find PhySP of child
	[childPhysicalSP-1] = -2;						// return -2.
	ireturn;										// Note that it's -1 and not -2 bcz IP has not been pushed in the stack. 
endif;